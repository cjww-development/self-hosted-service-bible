version: '3.7'

networks:
  nginx_net:
    name: nginx_net

  media_server_net:
    name: media_server_net
    external: true
  2fauth_net:
    name: 2fauth_net
    external: true
  flame_net:
    name: flame_net
    external: true
  monitoring_net:
    name: monitoring_net
    external: true
  # pi_hole_net:
  #   name: pi_hole_net
  #   external: true
  portainer_net:
    name: portainer_net
    external: true
  vaultwarden_net:
    name: vaultwarden_net
    external: true
  jenkins_net:
    name: jenkins_net
    external: true
  uptime_kuma_net:
    name: uptime_kuma_net
    external: true

volumes:
  certbot_certs:
    name: certbot_certs

services:
  nginx:
    image: nginx:$NGINX_VERSION
    container_name: nginx
    ports:
      - $HTTP_INTERFACE_BIND:443:443
    volumes:
      - /docker-container-config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /docker-container-config/nginx/servers:/etc/nginx/servers:ro
      - certbot_certs:/etc/nginx/ssl/:ro
    networks:
      - nginx_net
      - media_server_net
      - 2fauth_net
      - flame_net
      - monitoring_net
      # - pi_hole_net
      - portainer_net
      - vaultwarden_net
      - jenkins_net
      - uptime_kuma_net
    labels:
      - "diun.enable=true"
    restart: always

  certbot:
    image: certbot/certbot:$CERTBOT_VERSION
    container_name: certbot
    volumes:
      - certbot_certs:/etc/letsencrypt/:rw
    labels:
      - "diun.enable=true"

  nginx_ssl_backup:
    image: jareware/docker-volume-backup:$DVB_VERSION
    container_name: nginx_ssl_backup
    environment:
      AWS_S3_BUCKET_NAME: $AWS_S3_BUCKET_NAME
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      BACKUP_FILENAME: nginx-ssl.tar.gz
    volumes:
      - certbot_certs:/backup/certbot_certs
      - $DOCKER_SOCKET:/var/run/docker.sock:ro
    labels:
      - "diun.enable=true"
    restart: always
