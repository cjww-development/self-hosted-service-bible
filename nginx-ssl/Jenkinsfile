pipeline {
	agent {
		docker {
			image 'docker:latest'
			args '-v /var/run/docker.sock:/var/run/docker.sock -v /docker-container-config:/docker-container-config'
		}
	}
	options {
		ansiColor('xterm')
	}
	environment {
    SERVICE = "nginx-ssl"
    NGINX_VERSION = "1.23.1-alpine"
    NGINX_CONF_REPO = credentials("nginx-config-repository")
    HTTP_INTERFACE_BIND = "0.0.0.0"
    CERTBOT_VERSION = "latest"
		DVB_VERSION = "2.6.0"
		DOCKER_SOCKET = "/var/run/docker.sock"
		AWS_S3_BUCKET_NAME = credentials("docker-volume-backup-bucket")
		AWS_ACCESS_KEY_ID = credentials("docker-volume-backup-aws-access-key")
		AWS_SECRET_ACCESS_KEY = credentials("docker-volume-backup-aws-secret-key")
	}
  parameters {
		booleanParam(
			name: 'Deploy',
			defaultValue: false,
			description: 'Only deploy the service'
		)
		booleanParam(
			name: 'Update',
			defaultValue: false,
			description: 'Only update and restart the service'
		)
		booleanParam(
			name: 'Restart',
			defaultValue: false,
			description: 'Only restart the service'
		)
	}
	stages {
		stage("Pull Nginx images") {
			when {
				expression {
					params.Deploy || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose pull
          """
				}
			}
		}
		stage("Deploy updated configuration") {
			when {
				expression {
					params.Deploy
				}
			}
			steps {
				script {
          sshagent (credentials: ['cjww-dev-web-operations']) {
						sh """
              [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
              ssh-keyscan -t rsa,dsa github.com >> ~/.ssh/known_hosts
              cd $SERVICE
              mkdir -p /docker-container-config/nginx
              git clone $NGINX_CONF_REPO nginx-conf
              cp nginx-conf/nginx.conf /docker-container-config/nginx/nginx.conf
              cp -rf nginx-conf/servers /docker-container-config/nginx/servers
						"""
					}
				}
			}
		}
		stage("Deploy Nginx stack") {
			when {
				expression {
					params.Deploy
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose up -d --remove-orphans
          """
				}
			}
		}
		stage("Restart Nginx stack") {
			when {
				expression {
					params.Restart || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose restart
          """
				}
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}
