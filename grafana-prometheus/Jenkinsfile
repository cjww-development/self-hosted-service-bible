pipeline {
	agent {
		docker {
			image 'docker:latest'
			args '-v /var/run/docker.sock:/var/run/docker.sock -v /docker-container-config:/docker-container-config'
		}
	}
	options {
		ansiColor('xterm')
	}
	environment {
    SERVICE = "grafana-prometheus"
    GRAFANA_VERSION = "8.3.3"
    GRAFANA_HOST_NAME = credentials("grafana-host-name")
    GRAFANA_ADMIN_USER = "admin"
    GRAFANA_ADMIN_PASSWORD = credentials("grafana-admin-password")
    NODE_EXPORTER_VERSION = "v1.4.0"
    NODE_EXPORTER_HOST_NAME = credentials("node-exporter-host-name")
    PROC_PATH = "/proc"
    SYS_PATH = "/sys"
    ROOT_FS_PATH = "/"
    PROMETHEUS_VERSION = "v2.37.1"
    PROMETHEUS_HOST_NAME = credentials("prometheus-host-name")
    RETENTION_TIME = "120h"
    ALERT_MANAGER_VERSION = "v0.24.0"
    ALERT_MANAGER_HOST_NAME = credentials("alert-manager-host-name")
		DVB_VERSION = "2.6.0"
		DOCKER_SOCKET = "/var/run/docker.sock"
		AWS_S3_BUCKET_NAME = credentials("docker-volume-backup-bucket")
		AWS_ACCESS_KEY_ID = credentials("docker-volume-backup-aws-access-key")
		AWS_SECRET_ACCESS_KEY = credentials("docker-volume-backup-aws-secret-key")
	}
  parameters {
		booleanParam(
			name: 'Deploy',
			defaultValue: false,
			description: 'Only deploy the service'
		)
		booleanParam(
			name: 'Update',
			defaultValue: false,
			description: 'Only update and restart the service'
		)
		booleanParam(
			name: 'Restart',
			defaultValue: false,
			description: 'Only restart the service'
		)
	}
	stages {
		stage("Pull Grafana stack images") {
			when {
				expression {
					params.Deploy || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose pull
          """
				}
			}
		}
		stage("Deploy updated configuration") {
			when {
				expression {
					params.Deploy || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
            mkdir -p /docker-container-config/prometheus
						cp prometheus.yml /docker-container-config/prometheus/prometheus.yml
          """
				}
			}
		}
		stage("Deploy Grafana stack") {
			when {
				expression {
					params.Deploy || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose up -d --remove-orphans
          """
				}
			}
		}
		stage("Restart Grafana stack") {
			when {
				expression {
					params.Restart
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose restart
          """
				}
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}
