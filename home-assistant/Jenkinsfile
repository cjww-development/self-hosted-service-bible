pipeline {
	agent {
		docker {
			image 'docker:latest'
			args '-v /var/run/docker.sock:/var/run/docker.sock -v /docker-container-config:/docker-container-config'
		}
	}
	options {
		ansiColor('xterm')
	}
	environment {
    SERVICE = "home-assistant"
    VERSION = "stable"
		DVB_VERSION = "2.6.0"
		DOCKER_SOCKET = "/var/run/docker.sock"
		HA_DOMAIN = credentials("home-assistant-domain")
		NOTIFY_TOKEN = credentials("notify-token")
		AWS_S3_BUCKET_NAME = credentials("docker-volume-backup-bucket")
		AWS_ACCESS_KEY_ID = credentials("docker-volume-backup-aws-access-key")
		AWS_SECRET_ACCESS_KEY = credentials("docker-volume-backup-aws-secret-key")
	}
  parameters {
		booleanParam(
			name: 'Deploy',
			defaultValue: false,
			description: 'Only deploy the service'
		)
		booleanParam(
			name: 'Update',
			defaultValue: false,
			description: 'Only update and restart the service'
		)
		booleanParam(
			name: 'Restart',
			defaultValue: false,
			description: 'Only restart the service'
		)
		booleanParam(
			name: 'Shutdown',
			defaultValue: false,
			description: 'Shutdown the service'
		)
		booleanParam(
			name: 'Nuke',
			defaultValue: false,
			description: 'Destroy containers, networks and volumes'
		)
	}
	stages {
		stage("Pull Home Assistant images") {
			when {
				expression {
					params.Deploy || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose pull
          """
				}
			}
		}
		stage("Deploy updated configuration") {
			steps {
				script {
					sh """
						cd $SERVICE
						rm -rf /docker-container-config/home-assistant
            mkdir -p /docker-container-config/home-assistant
						sed -i -e "s/DOMAIN/$HA_DOMAIN/g" configuration.yaml
						sed -i -e "s/NOTIFY_TOKEN/$NOTIFY_TOKEN/g" configuration.yaml
						cp configuration.yaml /docker-container-config/home-assistant/configuration.yaml
          """
				}
			}
		}
		stage("Deploy Home Assistant") {
			when {
				expression {
					params.Deploy || params.Update
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose up -d --remove-orphans
          """
				}
			}
		}
		stage("Restart Home Assistant") {
			when {
				expression {
					params.Restart
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose restart
          """
				}
			}
		}
		stage("Shutdown Home Assistant stack") {
			when {
				expression {
					params.Shutdown
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose down
          """
				}
			}
		}
		stage("Nuke Home Assistant stack") {
			when {
				expression {
					params.Nuke
				}
			}
			steps {
				script {
					sh """
						cd $SERVICE
						docker compose down -v
          """
				}
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}
